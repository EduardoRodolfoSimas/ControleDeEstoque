@page "/Tamanho"

@using ControleDeEstoque.Model
@using ControleDeEstoque.Services.Tamanhos
@inject ITamanhoService TamanhoService
@rendermode InteractiveServer
@using Blazorise

<h3>Cadastro de Tamanhos</h3>

@if (tamanhos == null)
{
 <p><em>Carregando...</em></p>
}
else
{
 <table class="table">
  <thead>
  <tr>
   <th>Código</th>
   <th>Tamanho</th>
   <th>Descrição</th>
   <th><button class="btn btn-primary" @onclick="OpenAddTamanhoModal">Novo Tamanho</button></th>
  </tr>
  </thead>
  <tbody>
  @foreach (var tamanho in tamanhos)
  { 
    <tr>
    <td>@tamanho.Id</td>
    <td>@tamanho.Nome</td>
    <td>@tamanho.Descricao</td>
    <td>
     <button class="btn btn-warning" @onclick="() => OpenUpdateTamanhoModal(tamanho)">Atualizar</button>
     <button class="btn btn-danger" @onclick="() => OptionDeleteTamanhoButton(tamanho)">Deletar</button>
    </td>
   </tr>
  }
  </tbody>
 </table>
}
<Modal @ref="modalCriarTamanho">
 <ModalContent Size="ModalSize.Default" Centered="true">
  <ModalHeader>
   <strong>Adicionar um novo tamanho</strong>
  </ModalHeader>
  <ModalBody>
   <Field>
    <Label for="TamanhoNome" class="form-label">Tamanho</Label>
    <input type="text" class="form-control" id="TamanhoNome" @bind-value="NovoTamanhoNome" placeholder="Insira o nome do tamanho"/>
    <Label for="TamanhoDescricao" class="form-label">Descrição</Label>
    <input type="text" class="form-control" id="TamanhoDescricao" @bind-value="NovoTamanhoDescricao" placeholder="Insira a descrição do tamanho"/>
   </Field>
  </ModalBody>
  <ModalFooter>
   <Button Color="Color.Success" @onclick="InsertTamanhoButton">Salvar</Button>
   <Button Color="Color.Danger" @onclick="CancelTamanhoButton">Cancelar</Button>
  </ModalFooter>
 </ModalContent>
</Modal>

<Modal @ref="modalAtualizarTamanho">
 <ModalContent Size="ModalSize.Default" Centered="true">
  <ModalHeader>
   <strong>Atualizar Tamanho</strong>
  </ModalHeader>
  <ModalBody>
   <Field>
    <Label for="TamanhoNome" class="form-label">Tamanho</Label>
    <input type="text" class="form-control" id="TamanhoNome" @bind-value="NovoTamanhoNome" placeholder="Insira o nome do tamanho"/>
    <Label for="TamanhoDescricao" class="form-label">Descrição</Label>
    <input type="text" class="form-control" id="TamanhoDescricao" @bind-value="NovoTamanhoDescricao" placeholder="Insira a descrição do tamanho"/>
   </Field>
  </ModalBody>
  <ModalFooter>
   <Button Color="Color.Success" @onclick="UpdateTamanhoButton">Salvar</Button>
   <Button Color="Color.Danger" @onclick="CancelTamanhoButton">Cancelar</Button>
  </ModalFooter>
 </ModalContent>
</Modal>

<Modal @ref="modalDeletarTamanho">
 <ModalContent Size="ModalSize.Default" Centered="true">
  <ModalHeader>
   <strong>Deletar Tamanho</strong>
  </ModalHeader>
  <ModalBody>
   @if (tamanhoSelecionado != null)
   {
    <p>Tem certeza que deseja deleta o tamanho @tamanhoSelecionado.Nome?</p>
   }
  </ModalBody>
  <ModalFooter>
   <Button class="btn btn-danger" @onclick="DeleteTamanhoButton">Deletar</Button>
   <Button class="btn btn-secondary" @onclick="CancelTamanhoButton">Cancelar</Button>
  </ModalFooter>
 </ModalContent>
</Modal>

@code
{
 private List<Tamanho> tamanhos;
 private Modal modalCriarTamanho = new Modal();
 private Modal modalAtualizarTamanho = new Modal();
 private Modal modalDeletarTamanho = new Modal();
 private Tamanho tamanhoSelecionado;
 private string NovoTamanhoNome;
 private string NovoTamanhoDescricao;

 protected override async Task OnInitializedAsync()
 {
  tamanhos = await TamanhoService.GetTamanhos();
 }

 private void OpenAddTamanhoModal()
 {
  modalCriarTamanho.Show();
 }

 private void OpenUpdateTamanhoModal(Tamanho tamanho)
 {
  tamanhoSelecionado = tamanho;
  NovoTamanhoNome = tamanho.Nome;
  NovoTamanhoDescricao = tamanho.Descricao;
  modalAtualizarTamanho.Show();
 }

 private void CancelTamanhoButton()
 {
  modalCriarTamanho.Hide();
  modalAtualizarTamanho.Hide();
  modalDeletarTamanho.Hide();
 }

 private async Task InsertTamanhoButton()
 {
  Tamanho tamanho = new Tamanho
  {
   Nome = NovoTamanhoNome,
   Descricao = string.IsNullOrWhiteSpace(NovoTamanhoDescricao) ? null : NovoTamanhoDescricao,
   DataInsercao = DateTime.Now
  };
  await TamanhoService.AddTamanho(tamanho);
  tamanhos = await TamanhoService.GetTamanhos();
  modalCriarTamanho.Hide();
 }

 private async Task UpdateTamanhoButton()
 {
  if (tamanhoSelecionado != null)
  {
   Tamanho tamanho = new Tamanho
   {
    Id = tamanhoSelecionado.Id,
    Nome = NovoTamanhoNome,
    Descricao = NovoTamanhoDescricao
   };
   await TamanhoService.UpdateTamanho(tamanho);
   tamanhos = await TamanhoService.GetTamanhos();
   modalAtualizarTamanho.Hide();
  }
 }

 private void OptionDeleteTamanhoButton(Tamanho tamanho)
 {
  tamanhoSelecionado = tamanho;
  modalDeletarTamanho.Show();
 }

 private async Task DeleteTamanhoButton()
 {
  await TamanhoService.DeleteTamanho(tamanhoSelecionado.Id);
  tamanhos = await TamanhoService.GetTamanhos();
  modalDeletarTamanho.Hide();
 }
}