@page "/produto"
<PageTitle>Produtos</PageTitle>
@using ControleDeEstoque.Model
@using ControleDeEstoque.Services
@using Blazorise
@using ControleDeEstoque.DTOs.ProdutoDto
@using ControleDeEstoque.DTOs.TamanhoDto
@using ControleDeEstoque.Services.ICategoriaService
@using ControleDeEstoque.Services.IProdutoService
@using ControleDeEstoque.Services.ITamanhos
@inject IProdutoService ProdutoService
@inject ICategoriaService CategoriaService
@inject ITamanhoService TamanhoService
@rendermode InteractiveServer

<h3>Estoque de Produtos</h3>

@if (produtos == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Código</th>
            <th>Produto</th>
            <th>Categoria</th>
            <th>Tamanho</th>
            <th>Preço</th>
            <th>Quantidade em estoque</th>
            <th><button class="btn btn-primary" @onclick="OpenAddProdutoModal">Novo produto</button></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var produto in produtos)
        {
            <tr>
                <td>@produto.Sku</td>
                <td>@produto.Nome</td>
                <td>@categorias.FirstOrDefault(c => c.Id == produto.CategoriaId)?.Nome</td>
                <td>@tamanhos.FirstOrDefault(t => t.Id == produto.TamanhoId)?.Nome</td>
                <td>R$: @produto.ValorUnitario.ToString("F2")</td>
                <td>@produto.Quantidade</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => OpenUpdateProdutoModal(produto)">Atualizar</button>
                    <button class="btn btn-danger" @onclick="() => OptionDeleteProdutoButton(produto)">Deletar</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<Modal @ref="modalCriarProduto">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Adicionar um novo produto</strong>
        </ModalHeader>
        <ModalBody>
            <Field>
                <Label for="ProdutoNome" class="form-label">Nome</Label>
                <input type="text" class="form-control" @bind="NovoProdutoNome" placeholder="Insira o nome do produto" />

                <Label for="ProdutoSku" class="form-label">Código</Label>
                <input type="text" class="form-control" @bind="NovoProdutoSku" placeholder="Insira o código do produto" />

                <Label class="form-label">Categoria</Label>
                <Dropdown>
                    <DropdownToggle Color="Color.Default" Size="Size.Medium">
                        @categorias.FirstOrDefault(c => c.Id == NovoProdutoCategoria)?.Nome ?? "Selecionar a categoria"
                    </DropdownToggle>
                    <DropdownMenu>
                        @if (categorias?.Any() != true)
                        {
                            <DropdownItem disabled>Nenhuma categoria cadastrada</DropdownItem>
                        }
                        else
                        {
                            foreach (var categoria in categorias)
                            {
                                <DropdownItem @onclick="() => NovoProdutoCategoria = categoria.Id">@categoria.Nome</DropdownItem>
                            }
                        }
                    </DropdownMenu>
                </Dropdown>

                <Label class="form-label">Tamanho</Label>
                <Dropdown>
                    <DropdownToggle Color="Color.Default" Size="Size.Medium">
                        @tamanhos.FirstOrDefault(t => t.Id == NovoProdutoTamanho)?.Nome ?? "Selecionar o tamanho"
                    </DropdownToggle>
                    <DropdownMenu>
                        @if (tamanhos?.Any() != true)
                        {
                            <DropdownItem disabled>Nenhum tamanho cadastrado</DropdownItem>
                        }
                        else
                        {
                            foreach (var tamanho in tamanhos)
                            {
                                <DropdownItem @onclick="() => NovoProdutoTamanho = tamanho.Id">@tamanho.Nome</DropdownItem>
                            }
                        }
                    </DropdownMenu>
                </Dropdown>

                <Label for="ProdutoPreco" class="form-label">Preço Unitário</Label>
                <input type="number" class="form-control" @bind="NovoProdutoPreco" placeholder="Insira o preço unitário" />

                <Label for="ProdutoQuantidadeEstoque" class="form-label">Quantidade em estoque</Label>
                <input type="number" class="form-control" @bind="NovoProdutoQuantidadeEstoque" placeholder="Insira a quantidade total em estoque" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" @onclick="InsertProdutoButton">Salvar</Button>
            <Button Color="Color.Danger" @onclick="CancelProdutoButton">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Outros modais omitidos por redundância -->

@code {
    private string NovoProdutoNome;
    private string NovoProdutoSku;
    private decimal NovoProdutoPreco;
    private int NovoProdutoQuantidadeEstoque;
    private Guid NovoProdutoCategoria;
    private Guid NovoProdutoTamanho;

    private Modal modalCriarProduto;
    private Modal modalAtualizarProduto;
    private Modal modalExcluirProduto;
    private Modal modalFaltaInformacao;
    private Modal modalSkuJaCadastrado;
    
    private List<TamanhoDto> tamanhos;
    private List<CategoriaDto> categorias;
    private List<ProdutoDto> produtos;
    private ProdutoDto _produtoDto;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        produtos = await ProdutoService.ListarProdutos();
        categorias = await CategoriaService.ListarCategorias();
        tamanhos = await TamanhoService.ListarTamanhos();
    }

    private void OpenAddProdutoModal()
    {
        ClearProdutoForm();
        modalCriarProduto.Show();
    }

    private async Task InsertProdutoButton()
    {
        if (string.IsNullOrWhiteSpace(NovoProdutoNome) || string.IsNullOrWhiteSpace(NovoProdutoSku))
        {
            modalFaltaInformacao.Show();
            return;
        }

        if (produtos.Any(p => p.Sku == NovoProdutoSku))
        {
            modalSkuJaCadastrado.Show();
            return;
        }

        var novoProduto = new ProdutoDto
        {
            Nome = NovoProdutoNome,
            Sku = NovoProdutoSku,
            ValorUnitario = NovoProdutoPreco,
            Quantidade = NovoProdutoQuantidadeEstoque,
            CategoriaId = NovoProdutoCategoria,
            TamanhoId = NovoProdutoTamanho
        };

        await ProdutoService.AdicionarProduto(novoProduto);
        await LoadDataAsync();
        modalCriarProduto.Hide();
    }

    private void CancelProdutoButton()
    {
        modalCriarProduto.Hide();
        modalAtualizarProduto.Hide();
        modalExcluirProduto.Hide();
        ClearProdutoForm();
    }

    private void ClearProdutoForm()
    {
        NovoProdutoNome = string.Empty;
        NovoProdutoSku = string.Empty;
        NovoProdutoPreco = 0;
        NovoProdutoQuantidadeEstoque = 0;
        NovoProdutoCategoria = Guid.Empty;
        NovoProdutoTamanho = Guid.Empty;
    }
    
    private void OpenUpdateProdutoModal(ProdutoDto produtoDto)
    {
        this._produtoDto = produtoDto;
        NovoProdutoNome = produtoDto.Nome;
        NovoProdutoSku = produtoDto.Sku;
        NovoProdutoPreco = produtoDto.ValorUnitario;
        NovoProdutoQuantidadeEstoque = produtoDto.Quantidade;
        NovoProdutoCategoria = produtoDto.CategoriaId;
        NovoProdutoTamanho = produtoDto.TamanhoId;
        modalAtualizarProduto.Show();
    }
    
    private void OptionDeleteProdutoButton(ProdutoDto produtoDto)
    {
        this._produtoDto = produtoDto;
        modalExcluirProduto.Show();
    }
}
