@page "/produto"
@using Blazorise
@using Blazorise.DataGrid
@using ControleDeEstoque.DTOs.CategoriaDto
@using ControleDeEstoque.DTOs.ProdutoDto
@using ControleDeEstoque.DTOs.TamanhoDto
@using ControleDeEstoque.Services.ICategoriaService
@using ControleDeEstoque.Services.IProdutoService
@using ControleDeEstoque.Services.ITamanhos
@inject IProdutoService ProdutoService
@inject ICategoriaService CategoriaService
@inject ITamanhoService TamanhoService

<PageTitle>Gerenciamento de Produtos</PageTitle>

@if (produtos == null || categorias == null || tamanhos == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div style="display: inline;">
        <h3 style="display: inline;">Estoque</h3>
        <h5 style="display: inline;"> | Gerenciamento de Produtos</h5>
    </div>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <Div class="d-flex justify-content-end mb-2">
                        <Button Color="Color.Success" Clicked="AbrirModalAdicionarProduto">Novo Produto</Button>
                        <Button Color="Color.Warning" Disabled="(_produtoSelecionado is null)" Clicked="() => AbrirModalAtualizarProduto(_produtoSelecionado)">Atualizar</Button>
                        <Button Color="Color.Danger" Disabled="(_produtoSelecionado is null)" Clicked="() => AbrirModalDeletarProduto(_produtoSelecionado)">Excluir</Button>
                    </Div>
                    <DataGrid TItem="ProdutoDto"
                              Data="produtos"
                              @bind-SelectedRow="_produtoSelecionado"
                              Striped="true"
                              Bordered="true"
                              Hoverable="true"
                              ShowPager="true"
                              PageSize="10">
                        <DataGridColumns>
                            <DataGridColumn TItem="ProdutoDto" Field="@nameof(ProdutoDto.Nome)" Caption="Nome do Produto" />
                            <DataGridNumericColumn TItem="ProdutoDto" Field="@nameof(ProdutoDto.ValorUnitario)" Caption="Preço" DisplayFormat="{0:C}" />
                            <DataGridColumn TItem="ProdutoDto" Field="@nameof(ProdutoDto.CategoriaNome)" Caption="Categoria" />
                            <DataGridColumn TItem="ProdutoDto" Field="@nameof(ProdutoDto.TamanhoNome)" Caption="Tamanho" />
                            <DataGridNumericColumn TItem="ProdutoDto" Field="@nameof(ProdutoDto.Quantidade)" Caption="Quantidade" />
                        </DataGridColumns>
                    </DataGrid>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

<!-- Modal Adicionar Produto -->
<Modal @ref="modalCriarProduto">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Adicionar Produto</strong>
        </ModalHeader>
        <ModalBody>
            <Field>
                <Label for="ProdutoNome" class="form-label">Nome do Produto</Label>
                <input type="text" class="form-control" id="ProdutoNome" @bind-value="NovoProdutoNome" placeholder="Insira o nome do produto" />
                <Label for="ProdutoPreco" class="form-label">Preço</Label>
                <input type="number" class="form-control" id="ProdutoPreco" @bind-value="NovoProdutoPreco" placeholder="Insira o preço do produto" />
                <Label for="ProdutoCategoria" class="form-label">Categoria</Label>
                <Select TValue="Guid" @bind-value="NovoProdutoCategoriaId" Data="categorias" TextField="Nome" ValueField="Id" />
                <Label for="ProdutoTamanho" class="form-label">Tamanho</Label>
                <Select TValue="Guid" @bind-value="NovoProdutoTamanhoId" Data="tamanhos" TextField="Descricao" ValueField="Id" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" @onclick="InsertProdutoButton">Salvar</Button>
            <Button Color="Color.Danger" @onclick="CancelarProduto">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Modal Atualizar Produto -->
<Modal @ref="modalAtualizarProduto">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Atualizar Produto</strong>
        </ModalHeader>
        <ModalBody>
            <Field>
                <Label for="ProdutoNome" class="form-label">Nome do Produto</Label>
                <input type="text" class="form-control" id="ProdutoNome" @bind-value="NovoProdutoNome" placeholder="Insira o nome do produto" />
                <Label for="ProdutoPreco" class="form-label">Preço</Label>
                <input type="number" class="form-control" id="ProdutoPreco" @bind-value="NovoProdutoPreco" placeholder="Insira o preço do produto" />
                <Label for="ProdutoCategoria" class="form-label">Categoria</Label>
                <Select TValue="Guid" @bind-value="NovoProdutoCategoriaId" Data="categorias" TextField="Nome" ValueField="Id" />
                <Label for="ProdutoTamanho" class="form-label">Tamanho</Label>
                <Select TValue="Guid" @bind-value="NovoProdutoTamanhoId" Data="tamanhos" TextField="Descricao" ValueField="Id" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" @onclick="UpdateProdutoButton">Salvar</Button>
            <Button Color="Color.Danger" @onclick="CancelarProduto">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Modal Deletar Produto -->
<Modal @ref="modalDeletarProduto">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Excluir Produto</strong>
        </ModalHeader>
        <ModalBody>
            @if (_produtoSelecionado != null)
            {
                <p>Tem certeza que deseja excluir o produto @_produtoSelecionado.Nome?</p>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" @onclick="DeleteProdutoButton">Excluir</Button>
            <Button Color="Color.Secondary" @onclick="CancelarProduto">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<ProdutoDto> produtos;
    private List<CategoriaDto> categorias;
    private List<TamanhoDto> tamanhos;
    private Modal modalCriarProduto = new Modal();
    private Modal modalAtualizarProduto = new Modal();
    private Modal modalDeletarProduto = new Modal();
    private ProdutoDto _produtoSelecionado;
    private string NovoProdutoNome;
    private decimal NovoProdutoPreco;
    private Guid NovoProdutoCategoriaId;
    private Guid NovoProdutoTamanhoId;

    protected override async Task OnInitializedAsync()
    {
        produtos = await ProdutoService.ListarProdutos();
        categorias = await CategoriaService.ListarCategorias();
        tamanhos = await TamanhoService.ListarTamanhos();
    }

    private void AbrirModalAdicionarProduto()
    {
        LimparCampos();
        modalCriarProduto.Show();
    }

    private void AbrirModalAtualizarProduto(ProdutoDto produto)
    {
        _produtoSelecionado = produto;
        NovoProdutoNome = produto.Nome;
        NovoProdutoPreco = produto.ValorUnitario;
        NovoProdutoCategoriaId = produto.CategoriaId;
        NovoProdutoTamanhoId = produto.TamanhoId;
        modalAtualizarProduto.Show();
    }

    private void AbrirModalDeletarProduto(ProdutoDto produto)
    {
        _produtoSelecionado = produto;
        modalDeletarProduto.Show();
    }

    private void CancelarProduto()
    {
        LimparCampos();
        modalCriarProduto.Hide();
        modalAtualizarProduto.Hide();
        modalDeletarProduto.Hide();
    }

    private async Task InsertProdutoButton()
    {
        var novoProduto = new ProdutoDto
        {
            Nome = NovoProdutoNome,
            ValorUnitario = NovoProdutoPreco,
            CategoriaId = NovoProdutoCategoriaId,
            TamanhoId = NovoProdutoTamanhoId
        };
        await ProdutoService.AdicionarProduto(novoProduto);
        await AtualizarProdutos();
        modalCriarProduto.Hide();
    }

    private async Task UpdateProdutoButton()
    {
        _produtoSelecionado.Nome = NovoProdutoNome;
        _produtoSelecionado.ValorUnitario = NovoProdutoPreco;
        _produtoSelecionado.CategoriaId = NovoProdutoCategoriaId;
        _produtoSelecionado.TamanhoId = NovoProdutoTamanhoId;
        await ProdutoService.AtualizarProduto(_produtoSelecionado);
        await AtualizarProdutos();
        modalAtualizarProduto.Hide();
    }

    private async Task DeleteProdutoButton()
    {
        await ProdutoService.DeletarProduto(_produtoSelecionado.Id);
        await AtualizarProdutos();
        modalDeletarProduto.Hide();
    }

    private async Task AtualizarProdutos()
    {
        produtos = await ProdutoService.ListarProdutos();
    }

    private void LimparCampos()
    {
        NovoProdutoNome = string.Empty;
        NovoProdutoPreco = 0;
        NovoProdutoCategoriaId = Guid.Empty;
        NovoProdutoTamanhoId = Guid.Empty;
    }
}