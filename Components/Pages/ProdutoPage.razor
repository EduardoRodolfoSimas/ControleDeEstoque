@page "/produto"
<PageTitle>Produtos</PageTitle>
@using ControleDeEstoque.Model
@using ControleDeEstoque.Services
@using Blazorise
@using ControleDeEstoque.Services.Tamanhos
@using Microsoft.EntityFrameworkCore.Diagnostics
@inject IProdutoService ProdutoService
@inject ICategoriaService CategoriaService
@inject ITamanhoService TamanhoService
@rendermode InteractiveServer

<h3>Estoque de Produtos</h3>

@if (produtos == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Código</th>
            <th>Produto</th>
            <th>Categoria</th>
            <th>Tamanho</th>
            <th>Preço</th>
            <th>Quantidade em estoque</th>
            <th><button class="btn btn-primary" @onclick="OpenAddProdutoModal">Novo produto</button></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var produto in produtos)
        {
            <tr>
                <td>@produto.Sku</td>
                <td>@produto.Nome</td>
                <td>@categorias.FirstOrDefault(c => c.Id == produto.CategoriaId)?.Nome</td>
                <th>@tamanhos.FirstOrDefault(t =>t.Id == produto.TamanhoId)?.Nome</th>
                <td>R$: @produto.PrecoUnitario.ToString("F2")</td>
                <td>@produto.QuantidadeProduto</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => OpenUpdateProdutoModal(produto)">Atualizar</button>
                    @if(produto.QuantidadeProduto == 0)
                    {
                        <button class="btn btn-danger" disabled>Deletar</button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="() => OptionDeleteProdutoButton(produto)">Deletar</button>
                        }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<Modal @ref="modalCriarProduto">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Adicionar um novo produto</strong>
        </ModalHeader>
        <ModalBody>
            <Field>
                <Label for="ProdutoNome" class="form-label">Nome</Label>
                <input type="text" class="form-control" @bind="NovoProdutoNome" placeholder="Insira o nome do produto" />

                <Label for="ProdutoSku" class="form-label">Código</Label>
                <input type="text" class="form-control" id="ProdutoSku" @bind="NovoProdutoSku" placeholder="Insira o código do produto" />

                <Label class="form-label">Categoria</Label>
                <Dropdown>
                    <DropdownToggle Color="Color.Default" Size="Size.Medium">
                        @if (NovoProdutoCategoria.HasValue)
                        {
                            @categorias.FirstOrDefault(c => c.Id == NovoProdutoCategoria).Nome;
                        }
                        else
                        {
                            <text>Selecionar a categoria</text>
                        }
                    </DropdownToggle>
                    <DropdownMenu>
                        @if (categorias == null)
                        {
                            <DropdownItem disabled>Nenhuma categoria cadastrada</DropdownItem>
                        }
                        else
                        {
                            foreach (var categoria in categorias)
                            {
                                <DropdownItem @onclick="() => NovoProdutoCategoria = categoria.Id">@categoria.Nome</DropdownItem>
                            }
                        }
                    </DropdownMenu>
                </Dropdown>

                <Label for="Produtotamanho" class="form-label">Tamanho</Label>
                <Dropdown>
                    <DropdownToggle Color="Color.Default" Size="Size.Medium">
                        @if (NovoProdutoTamanho.HasValue)
                        {
                            @tamanhos.FirstOrDefault(t => t.Id == NovoProdutoTamanho).Nome;
                        }
                        else
                        {
                            <text>Selecionar o tamanho</text>
                        }
                    </DropdownToggle>
                    <DropdownMenu>
                        @if (tamanhos == null)
                        {
                            <DropdownItem disabled>Nenhum tamanho cadastrado</DropdownItem>
                        }
                        else
                        {
                            foreach (var tamanho in tamanhos)
                            {
                                <DropdownItem @onclick="() => NovoProdutoTamanho = tamanho.Id">@tamanho.Nome</DropdownItem>
                            }
                        }
                    </DropdownMenu>
                </Dropdown>

                <Label for="ProdutoPreco" class="form-label">Preço Unitário</Label>
                <input type="text" class="form-control" id="ProdutoPreco" @bind="NovoProdutoPreco" placeholder="Insira o preço unitário" />

                <Label for="ProdutoQuantidadeEstoque" class="form-label">Quantidade em estoque</Label>
                <input type="text" class="form-control" id="ProdutoQuantidadeEstoque" @bind="NovoProdutoQuantidadeEstoque" placeholder="Insira a quantidade total em estoque" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" @onclick="InsertProdutoButton">Salvar</Button>
            <Button Color="Color.Danger" @onclick="CancelProdutoButton">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


<Modal @ref="modalAtualizarProduto">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Atualizar produto</strong>
        </ModalHeader>
        <ModalBody>
            <Field>
                <Label for="ProdutoNome" class="form-label">Nome</Label>
                <input type="text" class="form-control" id="ProdutoNome" @bind="NovoProdutoNome" placeholder="Insira o nome do produto"/>
                <Label for="ProdutoSku" class="form-label">Código</Label>
                <input type="text" class="form-control" id="ProdutoSku" @bind="NovoProdutoSku" placeholder="Insira o código do produto"/>
                <Label for="ProdutoCategoria" class="form-label">Categoria</Label>
                <Dropdown>
                    <DropdownToggle Color="Color.Default" Size="Size.Medium" >
                        @if (NovoProdutoCategoria.HasValue)
                        {
                            @categorias.FirstOrDefault(c => c.Id == NovoProdutoCategoria).Nome;
                        }
                        else
                        {
                            <text>Selecionar a categoria</text>
                        }
                    </DropdownToggle>
                    <DropdownMenu>
                        @if (categorias == null)
                        {
                            <DropdownItem disabled>Nenhuma categoria cadastrada</DropdownItem>
                        }
                        else
                        {
                            foreach(var categoria in categorias)
                            {
                                <DropdownItem @onclick="() => NovoProdutoCategoria = categoria.Id">@categoria.Nome</DropdownItem>
                            }
                        }
                    </DropdownMenu>
                </Dropdown>
                <Label for="ProdutoTamanho" class="form-label">Tamanho</Label>
                <Dropdown>
                    <DropdownToggle Color="Color.Default" Size="Size.Medium">
                        @if (NovoProdutoTamanho.HasValue)
                        {
                            @tamanhos.FirstOrDefault(t => t.Id == NovoProdutoTamanho).Nome;
                        }
                        else
                        {
                            <text>Selecionar o tamanho</text>
                        }
                    </DropdownToggle>
                    <DropdownMenu>
                        @if (tamanhos == null)
                        {
                            <DropdownItem disabled>Nenhum tamanho cadastrado</DropdownItem>
                        }
                        else
                        {
                            foreach(var tamanho in tamanhos)
                            {
                                <DropdownItem @onclick="() => NovoProdutoTamanho = tamanho.Id">@tamanho.Nome</DropdownItem>
                            }
                        }
                    </DropdownMenu>
                </Dropdown>
                <Label for="ProdutoPreco" class="form-label">Preço Unitário</Label>
                <input type="text" class="form-control" id="ProdutoPreco" @bind="NovoProdutoPreco"/>
                <Label for="ProdutoQuantidadeEstoque" class="form-label">Quantidade em estoque</Label>
                <input type="text" class="form-control" id="ProdutoQuantidadeEstoque" @bind="NovoProdutoQuantidadeEstoque"/>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" @onclick="() => UpdateProdutoButton(produto)">Salvar</Button>
            <Button Color="Color.Danger" @onclick="CancelProdutoButton">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalExcluirProduto">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Excluir Produto</strong>
        </ModalHeader>
        <ModalBody>
            <p>Tem certeza que deseja excluir o produto @produto?.Nome?</p>
        </ModalBody>
        <ModalFooter>
            <Button class="btn btn-danger" @onclick="DeleteProduto">Deletar</Button>
            <Button class="btn btn-secondary" @onclick="CancelProdutoButton">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalFaltaInformacao">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Alerta!</strong>
        </ModalHeader>
        <ModalBody>
            <p>Por favor, preencha todos os campos obrigatórios.</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" @onclick="FecharModalFaltaInformacao">Fechar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="modalSkuJaCadastrado">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Alerta!</strong>
        </ModalHeader>
        <ModalBody>
            <p>O código deste produto já está cadastrado.</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" @onclick="FecharModalFaltaInformacao">Fechar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private string NovoProdutoNome;
    private string NovoProdutoSku;
    private decimal NovoProdutoPreco;
    private int NovoProdutoQuantidadeEstoque;
    private int? NovoProdutoCategoria;
    private int? NovoProdutoTamanho;

    private Modal modalCriarProduto;
    private Modal modalAtualizarProduto;
    private Modal modalExcluirProduto;
    private Modal modalFaltaInformacao;
    private Modal modalSkuJaCadastrado;
    
    private List<Tamanho> tamanhos;
    private List<Categoria> categorias;
    private List<Produto> produtos;
    private Produto produto;

    protected override async Task OnInitializedAsync()
    {
        produtos = await ProdutoService.GetProdutos();
        categorias = await CategoriaService.GetCategorias();
        tamanhos = await TamanhoService.GetTamanhos();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            modalCriarProduto ??= new Modal();
            modalAtualizarProduto ??= new Modal();
            modalExcluirProduto ??= new Modal();
            modalFaltaInformacao ??= new Modal();
            modalSkuJaCadastrado ??= new Modal();
        }
    }

    private void OpenAddProdutoModal()
    {
        modalCriarProduto.Show();
    }

    private async Task InsertProdutoButton()
    {
        var produto = new Produto
        {
            Nome = NovoProdutoNome,
            Sku = NovoProdutoSku,
            PrecoUnitario = NovoProdutoPreco,
            QuantidadeProduto = NovoProdutoQuantidadeEstoque,
            CategoriaId = NovoProdutoCategoria,
            TamanhoId = NovoProdutoTamanho
        };
        if (produtos.Any(p => p.Sku == produto.Sku))
        {
            modalSkuJaCadastrado.Show();
            return;
        }
        
        if (string.IsNullOrEmpty(produto.Nome) || string.IsNullOrEmpty(produto.Sku))
        {
            modalFaltaInformacao.Show();
        }
        else
        {
            await ProdutoService.AddProduto(produto);
            produtos = await ProdutoService.GetProdutos();
            modalCriarProduto.Hide();
            ClearProdutoForm();
        }
    }

    private void CancelProdutoButton()
    {
        modalCriarProduto.Hide();
        modalAtualizarProduto.Hide();
        modalExcluirProduto.Hide();
        ClearProdutoForm();
    }

    private void OptionDeleteProdutoButton(Produto produto)
    {
        this.produto = produto;
        modalExcluirProduto.Show();
    }

    private async Task DeleteProduto()
    {
        await ProdutoService.DeleteProduto(produto.Id);
        produtos = await ProdutoService.GetProdutos();
        modalExcluirProduto.Hide();
    }


    private void OpenUpdateProdutoModal(Produto produto)
    {
        this.produto = produto;
        NovoProdutoNome = produto.Nome;
        NovoProdutoSku = produto.Sku;
        NovoProdutoPreco = produto.PrecoUnitario;
        NovoProdutoQuantidadeEstoque = produto.QuantidadeProduto;
        NovoProdutoCategoria = produto.CategoriaId;
        NovoProdutoTamanho = produto.TamanhoId;
        modalAtualizarProduto.Show();
    }

    private async Task UpdateProdutoButton(Produto produto)
    {

        produto.Nome = NovoProdutoNome;
        produto.Sku = NovoProdutoSku;
        produto.PrecoUnitario = NovoProdutoPreco;
        produto.QuantidadeProduto = NovoProdutoQuantidadeEstoque;
        produto.CategoriaId = NovoProdutoCategoria;
        produto.TamanhoId = NovoProdutoTamanho;

        if (string.IsNullOrEmpty(produto.Nome) || string.IsNullOrEmpty(produto.Sku))
        {
            modalFaltaInformacao.Show();
        }
        else
        {
            await ProdutoService.UpdateProduto(produto);
            produtos = await ProdutoService.GetProdutos();
            modalAtualizarProduto.Hide();
            ClearProdutoForm();
        }
    }

    private void ClearProdutoForm()
    {
        NovoProdutoNome = null;
        NovoProdutoSku = null;
        NovoProdutoPreco = 0;
        NovoProdutoQuantidadeEstoque = 0;
        NovoProdutoCategoria = null;
        NovoProdutoTamanho = null;
    }

    private void FecharModalFaltaInformacao()
    {
        modalFaltaInformacao.Hide();
        modalSkuJaCadastrado.Hide();    
    }
}