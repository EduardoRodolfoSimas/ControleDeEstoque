namespace ControleDeEstoque.Pages;

@page "/produto"
<PageTitle>Produtos</PageTitle>
@using ControleDeEstoque.DTOs.CategoriaDto
@using ControleDeEstoque.Services
@using Blazorise
@using ControleDeEstoque.DTOs.ProdutoDto
@using ControleDeEstoque.DTOs.TamanhoDto
@using ControleDeEstoque.DTOs.CategoriaDto
@using ControleDeEstoque.Services.ICategoriaService
@using ControleDeEstoque.Services.IProdutoService
@using ControleDeEstoque.Services.ITamanhos
@inject IProdutoService ProdutoService
@inject ICategoriaService CategoriaService
@inject ITamanhoService TamanhoService
@rendermode InteractiveServer

<h3>Gerenciamento de Produtos</h3>

@if (produtos == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Código</th>
            <th>Produto</th>
            <th>Categoria</th>
            <th>Tamanho</th>
            <th>Preço</th>
            <th>Quantidade</th>
            <th><button class="btn btn-primary" @onclick="AbrirModalCriarProduto">Novo Produto</button></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var produto in produtos)
        {
            <tr>
                <td>@produto.Sku</td>
                <td>@produto.Nome</td>
                <td>@categorias.FirstOrDefault(c => c.Id == produto.CategoriaId)?.Nome</td>
                <td>@tamanhos.FirstOrDefault(t => t.Id == produto.TamanhoId)?.Nome</td>
                <td>R$ @produto.ValorUnitario.ToString("F2")</td>
                <td>@produto.Quantidade</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => AbrirModalAtualizarProduto(produto)">Editar</button>
                    <button class="btn btn-danger" @onclick="() => AbrirModalExcluirProduto(produto)">Excluir</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<Modal @ref="modalCriarProduto">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Criar Novo Produto</strong>
        </ModalHeader>
        <ModalBody>
            <Field>
                <Label>Nome</Label>
                <InputText @bind-Value="NovoProduto.Nome" Placeholder="Insira o nome do produto" />

                <Label>Código</Label>
                <InputText @bind-Value="NovoProduto.Sku" Placeholder="Insira o código do produto" />

                <Label>Categoria</Label>
                <Dropdown>
                    <DropdownToggle>@categorias.FirstOrDefault(c => c.Id == NovoProduto.CategoriaId)?.Nome ?? "Selecione uma categoria"</DropdownToggle>
                    <DropdownMenu>
                        @if (categorias == null || !categorias.Any())
                        {
                            <DropdownItem disabled>Nenhuma categoria disponível</DropdownItem>
                        }
                        else
                        {
                            @foreach (var categoria in categorias)
                            {
                                <DropdownItem @onclick="() => NovoProduto.CategoriaId = categoria.Id">@categoria.Nome</DropdownItem>
                            }
                        }
                    </DropdownMenu>
                </Dropdown>

                <Label>Tamanho</Label>
                <Dropdown>
                    <DropdownToggle>@tamanhos.FirstOrDefault(t => t.Id == NovoProduto.TamanhoId)?.Nome ?? "Selecione um tamanho"</DropdownToggle>
                    <DropdownMenu>
                        @if (tamanhos == null || !tamanhos.Any())
                        {
                            <DropdownItem disabled>Nenhum tamanho disponível</DropdownItem>
                        }
                        else
                        {
                            @foreach (var tamanho in tamanhos)
                            {
                                <DropdownItem @onclick="() => NovoProduto.TamanhoId = tamanho.Id">@tamanho.Nome</DropdownItem>
                            }
                        }
                    </DropdownMenu>
                </Dropdown>

                <Label>Preço</Label>
                <InputNumber @bind-Value="NovoProduto.ValorUnitario" Placeholder="Insira o preço unitário" />

                <Label>Quantidade</Label>
                <InputNumber @bind-Value="NovoProduto.Quantidade" Placeholder="Insira a quantidade" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" @onclick="SalvarNovoProduto">Salvar</Button>
            <Button Color="Color.Danger" @onclick="CancelarModal">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private ProdutoDto NovoProduto = new ProdutoDto();
    private ProdutoDto ProdutoSelecionado;
    private Modal modalCriarProduto;
    private Modal modalAtualizarProduto;
    private Modal modalExcluirProduto;
    private List<ProdutoDto> produtos;
    private List<CategoriaDto> categorias;
    private List<TamanhoDto> tamanhos;

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }

    private async Task CarregarDados()
    {
        produtos = await ProdutoService.ListarProdutos();
        categorias = await CategoriaService.ListarCategorias();
        tamanhos = await TamanhoService.ListarTamanhos();
    }

    private void AbrirModalCriarProduto()
    {
        NovoProduto = new ProdutoDto();
        modalCriarProduto.Show();
    }

    private async Task SalvarNovoProduto()
    {
        if (string.IsNullOrWhiteSpace(NovoProduto.Nome) || string.IsNullOrWhiteSpace(NovoProduto.Sku))
        {
            // Mostrar erro de validação
            return;
        }

        await ProdutoService.AdicionarProduto(NovoProduto);
        await CarregarDados();
        modalCriarProduto.Hide();
    }

    private void AbrirModalAtualizarProduto(ProdutoDto produto)
    {
        ProdutoSelecionado = produto;
        NovoProduto = new ProdutoDto
        {
            Id = produto.Id,
            Nome = produto.Nome,
            Sku = produto.Sku,
            ValorUnitario = produto.ValorUnitario,
            Quantidade = produto.Quantidade,
            CategoriaId = produto.CategoriaId,
            TamanhoId = produto.TamanhoId
        };
        modalAtualizarProduto.Show();
    }

    private async Task SalvarAtualizacaoProduto()
    {
        await ProdutoService.AtualizarProduto(NovoProduto);
        await CarregarDados();
        modalAtualizarProduto.Hide();
    }

    private void AbrirModalExcluirProduto(ProdutoDto produto)
    {
        ProdutoSelecionado = produto;
        modalExcluirProduto.Show();
    }

    private async Task ConfirmarExclusaoProduto()
    {
        await ProdutoService.DeletarProduto(ProdutoSelecionado.Id);
        await CarregarDados();
        modalExcluirProduto.Hide();
    }

    private void CancelarModal()
    {
        modalCriarProduto.Hide();
        modalAtualizarProduto.Hide();
        modalExcluirProduto.Hide();
    }
}
