@page "/vendas"
@using ControleDeEstoque.Model
@using ControleDeEstoque.Services
@using Blazorise
@using Blazorise.DataGrid
@using ControleDeEstoque.Services.Vendas
@inject IProdutoService ProdutoService
@inject IVendasService VendaService
@rendermode InteractiveServer

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Registro de Vendas</CardTitle>
            </CardHeader>
            <CardBody>
                <DataGrid TItem="Venda"
                          Data="vendas"
                          Responsive
                          ShowPager
                          PageSize="1"
                          Editable
                          EditMode="DataGridEditMode.Cell">
                    <DataGridColumns>
                        <DataGridColumn TItem="Venda" Field="@nameof(Venda.ProdutoNome)" Caption="Produto" />
                        <DataGridColumn TItem="Venda" Field="@nameof(Venda.CategoriaNome)" Caption="Categoria" />
                        <DataGridColumn TItem="Venda" Field="@nameof(Venda.TamanhoNome)" Caption="Tamanho" />
                        <DataGridNumericColumn TItem="Venda" Field="@nameof(Venda.QuantidadeVendida)" Caption="Quantidade Vendida" Editable />
                        <DataGridNumericColumn TItem="Venda" Field="@nameof(Venda.PrecoUnitario)" Caption="Preço Unitário" DisplayFormat="{0:C}" />
                        <DataGridColumn TItem="Venda" Field="@nameof(Venda.DataVenda)" Caption="Data da Venda" DisplayFormat="{0:dd/MM/yyyy HH:mm}" />
                        <DataGridColumn TItem="Venda" Field="@nameof(Venda.FormaPagamento)" Caption="Forma de Pagamento" />
                        <DataGridNumericColumn TItem="Venda" Field="@nameof(Venda.Subtotal)" Caption="Subtotal" DisplayFormat="{0:C}" />
                    </DataGridColumns>
                    <ButtonRowTemplate>
                        <Button Color="Color.Success" Clicked="RegistrarVenda">Registrar Venda</Button>
                        <Button Color="Color.Warning" Clicked="AtualizarProdutos">Atualizar Venda</Button>
                        <!-- TODO: Implementar a devolução pro estoque -->
                        <Button Color="Color.Danger" Clicked="ExcluirVenda">Excluir</Button> 
                    </ButtonRowTemplate>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>

<Modal @ref="ModalRegistrarVenda">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Registrar venda</strong>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Código do Produto</FieldLabel>
                <TextEdit @bind-Text="ProdutoSku" Placeholder="Insira o código do produto" />
                <Button Clicked="PesquisarVendaProduto">Pesquisar</Button>
            </Field>
            <Field>
                <FieldLabel>Nome do Produto</FieldLabel>
                <TextEdit @bind-Text="ProdutoNome" Disabled />
            </Field>
            <Field>
                <FieldLabel>Quantidade Vendida</FieldLabel>
                <NumericEdit TValue="int" @bind-Value="QuantidadeVendida" Placeholder="Quantidade" />
            </Field>
            <Field>
                <FieldLabel>Forma de Pagamento</FieldLabel>
                <Select @bind-SelectedValue="FormaPagamentoString">
                    <SelectItem Value="@(FormaPagamento.Crédito)">Crédito</SelectItem>
                    <SelectItem Value="@(FormaPagamento.Débito)">Débito</SelectItem>
                    <SelectItem Value="@(FormaPagamento.Dinheiro)">Dinheiro</SelectItem>
                    <SelectItem Value="@(FormaPagamento.Pix)">Pix</SelectItem>
                    <SelectItem Value="@(FormaPagamento.Troca)">Troca</SelectItem>
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" Clicked="() => AlternarModalRegistrarVenda(true)">Salvar</Button>
            <Button Color="Color.Danger" Clicked="() => AlternarModalRegistrarVenda(false)">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private string ProdutoSku;
    private string ProdutoNome;
    private string FormaPagamentoString;
    private FormaPagamento FormaPagamentoEnum;
    private int QuantidadeVendida;
    private List<Produto> produtos;
    private List<Venda> vendas;
    private Modal ModalRegistrarVenda;
    private Produto produto;

    protected override async Task OnInitializedAsync()
    {
        produtos = await ProdutoService.GetProdutos() ?? new List<Produto>();
        vendas = await VendaService.ObterVendas() ?? new List<Venda>();
    }
    
    private async Task RegistrarVenda()
    {
        ModalRegistrarVenda.Show();
    }

    private async Task AlternarModalRegistrarVenda(bool salvar)
    {
        if (salvar)
        {
            if (produto != null && !string.IsNullOrEmpty(ProdutoSku) && QuantidadeVendida > 0)
            {
                if (produto.QuantidadeProduto >= QuantidadeVendida)
                {
                    var venda = new Venda
                    {
                        ProdutoSku = produto.Sku,
                        ProdutoNome = produto.Nome,
                        CategoriaId = produto.CategoriaId,
                        TamanhoId = produto.TamanhoId,
                        DataVenda = DateTime.Now,
                        PrecoUnitario = produto.PrecoUnitario,
                        QuantidadeVendida = QuantidadeVendida,
                        FormaPagamento = FormaPagamentoString
                    };

                    await VendaService.RegistrarVenda(venda);
                    await AtualizarProdutos();
                    vendas = await VendaService.ObterVendas();
                    
                    
                    
                    LimparFormulario();
                    ModalRegistrarVenda.Hide();
                }
                else
                {
                    ProdutoSku = "Estoque insuficiente para essa venda.";
                }
            }
            else
            {
                ProdutoSku = "Preencha os dados corretamente.";
            }
        }
        else
        {
            LimparFormulario();
            ModalRegistrarVenda.Hide();
        }
    }
    private void LimparFormulario()
    {
        ProdutoSku = string.Empty;
        QuantidadeVendida = 0;
        FormaPagamentoString = string.Empty;
        ProdutoNome = string.Empty;
    }

    private async Task PesquisarVendaProduto()
    {
        if (produtos != null)
        {
            produto = produtos.FirstOrDefault(p => p.Sku == ProdutoSku);
            if (produto != null)
            {
                ProdutoNome = produto.Nome;
            }
            else
            {
                ProdutoSku = "Produto não encontrado";
            }
        }
    }

    private async Task ExcluirVenda()
    {
        await VendaService.ExcluirVenda();
        await AtualizarProdutos();
    }

    private async Task AtualizarProdutos()
    {
        produtos = await ProdutoService.GetProdutos();
        vendas = await VendaService.ObterVendas();
        StateHasChanged();
    }
}