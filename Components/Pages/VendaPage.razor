@page "/vendas"

@using Blazorise
@using Blazorise.DataGrid
@using Blazorise.Extensions
@using ControleDeEstoque.DTOs.FormaDePagamentoDto
@using ControleDeEstoque.DTOs.ProdutoDto
@using ControleDeEstoque.DTOs.VendaDto
@using ControleDeEstoque.DTOs.VendaItemDto
@using ControleDeEstoque.Services.IFormaDePagamentoService
@using ControleDeEstoque.Services.IProdutoService
@using ControleDeEstoque.Services.IVendaItemService
@using ControleDeEstoque.Services.IVendasService
@rendermode InteractiveServer

@inject IVendasService VendaService
@inject IProdutoService ProdutoService
@inject IFormaDePagamentoService FormaDePagamentoService
@inject IVendaItemService VendaItemService

<PageTitle>Controle de Vendas</PageTitle>

@if (VendasDoDia == null || FormasDePagamento == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div style="display: inline;">
        <h3 style="display: inline;">Vendas</h3>
        <h5 style="display: inline;"> | Controle de Vendas</h5>
    </div>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <Div class="d-flex justify-content-end mb-2">
                        <Div>
                            <Button Color="Color.Success" Clicked="AbrirModalRegistrarVenda">Nova Venda</Button>
                        </Div>
                    </Div>
                    <DataGrid TItem="VendaDto"
                              Data="VendasDoDia"
                              Striped="true"
                              Bordered="true"
                              Hoverable="true"
                              RowClicked="ToggleExibirItens">
                        <DataGridColumns>
                            <DataGridColumn TItem="VendaDto" Field="@nameof(VendaDto.DataVenda)" Caption="Data da Venda" DisplayFormat="{0:dd/MM/yyyy HH:mm}" />
                            <DataGridColumn TItem="VendaDto"
                                            Caption="Método de Pagamento"
                                            DisplayTemplate="@(context => builder =>
                                                             {
                                                                 var formaPagamento = FormasDePagamento.FirstOrDefault(f => f.Id == context.MetodoPagamentoId)?.Tipo ?? "Método não encontrado";
                                                                 builder.AddContent(0, formaPagamento);
                                                             })" />
                            <DataGridNumericColumn TItem="VendaDto" Field="@nameof(VendaDto.ValorTotal)" Caption="Valor Total" DisplayFormat="{0:C}" />
                        </DataGridColumns>
                    </DataGrid>
                </CardBody>
            </Card>
        </Column>
    </Row>

    @if (ItensExibidos.Count > 0)
    {
        <Row>
            <Column>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>
                        <strong>Itens da Venda</strong>
                    </CardHeader>
                    <CardBody>
                        <DataGrid TItem="VendaItemDto" Data="ItensExibidos" Striped="true" Bordered="true" Hoverable="true">
                            <DataGridColumns>
                                <DataGridColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.ProdutoId)" Caption="Produto"/>
                                <DataGridNumericColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.ValorUnitario)" Caption="Valor Unitário" DisplayFormat="{0:C}"/>
                                <DataGridColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.Quantidade)" Caption="Quantidade"/>
                                <DataGridNumericColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.Subtotal)" Caption="Subtotal" DisplayFormat="{0:C}"/>
                            </DataGridColumns>
                        </DataGrid>
                    </CardBody>
                </Card>
            </Column>
        </Row>
    }
}

<!-- Modal Registrar Venda -->
<Modal @ref="ModalRegistrarVenda">
    <ModalContent Size="ModalSize.Large" Centered="true">
        <ModalHeader>
            <strong>Registrar Nova Venda</strong>
        </ModalHeader>
        <ModalBody>
            <!-- Campo para buscar produto pelo SKU -->
            <Field>
                <FieldLabel>Adicionar Produto</FieldLabel>
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="ProdutoSku" Placeholder="Digite o código do produto" />
                    </Addon>
                </Addons>
            </Field>

            <!-- Botão separado -->
            <Div class="mt-3">
                <Button Color="Color.Default" Clicked="AdicionarProduto">
                    <Icon Name="IconName.PlusCircle" /> Adicionar Produto
                </Button>
            </Div>

            <!-- Nome do produto -->
            <Field>
                <FieldLabel>Nome do Produto</FieldLabel>
                <TextEdit @bind-Text="NomeProduto" Disabled="true" />
            </Field>

            <!-- Campo de quantidade -->
            <Field>
                <FieldLabel>Quantidade</FieldLabel>
                <NumericEdit TValue="int" @bind-Value="QuantidadeVendida" Min="1" />
            </Field>

            <!-- Itens adicionados -->
            <Field>
                <FieldLabel>Itens Adicionados</FieldLabel>
                <DataGrid TItem="VendaItemDto" Data="ItensVendidos" Striped="true" Bordered="true">
                    <DataGridColumns>
                        <DataGridColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.ProdutoId)" Caption="Produto" />
                        <DataGridNumericColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.Quantidade)" Caption="Quantidade" />
                        <DataGridNumericColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.ValorUnitario)" Caption="Valor Unitário" DisplayFormat="{0:C}" />
                        <DataGridNumericColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.Subtotal)" Caption="Subtotal" DisplayFormat="{0:C}" />
                        <DataGridCommandColumn TItem="VendaItemDto">
                            <CommandTemplate>
                                <Button Color="Color.Danger" Clicked="() => RemoverItem(context)">
                                    <Icon Name="IconName.Clear" /> Remover
                                </Button>
                            </CommandTemplate>
                        </DataGridCommandColumn>
                    </DataGridColumns>
                </DataGrid>
            </Field>

            <!-- Seleção de forma de pagamento -->
            <Field>
                <Label for="FormaDePagamento">Forma de Pagamento</Label>
                <Select TValue="Guid" @bind-Value="NovaFormaDePagamentoId">
                    @if (FormasDePagamento != null)
                    {
                        foreach (var forma in FormasDePagamento)
                        {
                            <SelectItem Value="@forma.Id">@forma.Tipo</SelectItem>
                            NovaFormaDePagamentoId = forma.Id;
                        }
                    }
                    else
                    {
                        <SelectItem Value="default(Guid)" Disabled="true">Nenhuma forma de pagamento cadastrada</SelectItem>
                    }
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" Clicked="SalvarVenda">Salvar</Button>
            <Button Color="Color.Danger" Clicked="CancelarVenda">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<VendaDto> VendasDoDia = new();
    private List<VendaItemDto> ItensExibidos = new();
    private string NomeProduto;
    private int QuantidadeVendida = 1;
    private ProdutoDto ProdutoSelecionado;
    private List<VendaItemDto> ItensVendidos = new();
    private List<FormaDePagamentoDto> FormasDePagamento;
    private Guid NovaFormaDePagamentoId;
    private string ProdutoSku;
    private Modal ModalRegistrarVenda;
    private VendaItemDto context;
    private Guid novaVendaId = Guid.NewGuid();


    protected override async Task OnInitializedAsync()
    {
        FormasDePagamento = await FormaDePagamentoService.ListarFormasDePagamento();
        VendasDoDia = await VendaService.ListarVendas();
    }

    private async Task AdicionarProduto()
        {
        // Obtém os produtos cadastrados
        var produtos = await ProdutoService.ListarProdutos();

        // Procura o produto selecionado pelo SKU
        ProdutoSelecionado = produtos.FirstOrDefault(p => p.Sku == ProdutoSku);
        if (ProdutoSelecionado == null)
        {
            NomeProduto = "Produto não encontrado.";
            return;
        }

        // Verifica se o produto já está na lista de itens da venda
        var itemExistente = ItensVendidos.FirstOrDefault(i => i.ProdutoId == ProdutoSelecionado.Id);
        if (itemExistente != null)
        {
            // Se o item já existe, apenas atualiza a quantidade
            itemExistente.Quantidade += QuantidadeVendida;
            itemExistente.Subtotal = itemExistente.Quantidade * itemExistente.ValorUnitario;
        }
        else
        {
            // Se o item não existe, cria um novo item
            var item = new VendaItemDto
            {
                Id = Guid.NewGuid(),
                VendaId = novaVendaId, // A ID da venda já foi gerada no momento de salvar
                ProdutoId = ProdutoSelecionado.Id,
                Quantidade = QuantidadeVendida,
                ValorUnitario = ProdutoSelecionado.ValorUnitario,
                Subtotal = ProdutoSelecionado.ValorUnitario * QuantidadeVendida
            };
            ItensVendidos.Add(item);
        }

        // Limpa os campos de input
        ProdutoSku = string.Empty;
        NomeProduto = string.Empty;
        QuantidadeVendida = 1;
    }

    private void RemoverItem(VendaItemDto item)
    {
        ItensVendidos.Remove(item);
    }

    private async Task SalvarVenda()
    {
        // Gera o ID da venda apenas quando for salvar
        novaVendaId = Guid.NewGuid();

        var novaVenda = new VendaDto
        {
            Id = novaVendaId,
            MetodoPagamentoId = NovaFormaDePagamentoId,
            Itens = ItensVendidos.Select(i => new VendaItemDto
            {
                ProdutoId = i.ProdutoId,
                Quantidade = i.Quantidade,
                ValorUnitario = i.ValorUnitario
            }).ToList(),
            ValorTotal = ItensVendidos.Sum(i => i.Subtotal)
        };

        // Salva a venda
        await VendaService.AdicionarVenda(novaVenda);

        // Adiciona os itens da venda
        foreach (var item in ItensVendidos)
        {
            item.VendaId = novaVendaId;  // Atribui corretamente o ID da venda aos itens
            await VendaItemService.AdicionarVendaItem(item);
        }

        // Atualiza as vendas do dia
        VendasDoDia.Add(novaVenda);

        // Limpa o estado do modal
        ItensVendidos.Clear();
        NovaFormaDePagamentoId = Guid.Empty;
        ModalRegistrarVenda.Hide();
    }

    private void CancelarVenda()
    {
        ItensVendidos.Clear();
        NovaFormaDePagamentoId = Guid.Empty;
        ModalRegistrarVenda.Hide();
    }

    private void AbrirModalRegistrarVenda()
    {
        ProdutoSku = string.Empty;
        NomeProduto = string.Empty;
        QuantidadeVendida = 1;
        ItensVendidos.Clear();
        NovaFormaDePagamentoId = Guid.Empty;
        ModalRegistrarVenda.Show();
    }
    private async Task ToggleExibirItens(DataGridRowMouseEventArgs<VendaDto> args)
    {
        var venda = args.Item;

        if (ItensExibidos.Any() && ItensExibidos.First().VendaId == venda.Id)
        {
            ItensExibidos.Clear();
        }
        else
        {
            ItensExibidos = await VendaItemService.ListarVendaItens(venda.Id);
        }
    }
}