@page "/vendas"
@using Blazorise
@using Blazorise.DataGrid
@using ControleDeEstoque.DTOs.ProdutoDto
@using ControleDeEstoque.DTOs.VendaDto
@using ControleDeEstoque.DTOs.VendaItemDto
@using ControleDeEstoque.Services.IProdutoService
@using ControleDeEstoque.Services.Vendas
@inject IProdutoService ProdutoService
@inject IVendasService VendaService
@rendermode InteractiveServer

<div style="display: inline;">
    <h3 style="display: inline;">Vendas</h3>
    <h5 style="display: inline;"> | Gerenciamento de Vendas</h5>
</div>
<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardBody>
                <Div class="d-flex justify-content-between mb-2">
                    <Div class="d-flex justify-content-start">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <DatePicker @ref="datePicker" TValue="DateTime?" @bind-Date="selectedDate" InputFormat="dd/MM/yyyy" DisplayFormat="dd/MM/yyyy" OnKeyPress="HandleKeyPress"/>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Button Color="Color.Light" Clicked="@(async () => await HandleKeyPress(new KeyboardEventArgs { Key = "Enter" }))">
                                    <Icon Name="IconName.CalendarDay"/>
                                </Button>
                            </Addon>
                        </Addons>
                        </Div>
                    <Div>
                        <Button Color="Color.Success" Clicked="RegistrarVenda">Nova venda</Button>
                        <Button Color="Color.Warning" Clicked="AtualizarProdutos">Atualizar</Button>
                        <Button Color="Color.Danger" Clicked="ExcluirVenda">Excluir</Button>
                    </Div>
                </Div>
                <DataGrid TItem="VendaDto"
                          Data="@(vendasPorDia.ElementAtOrDefault(currentPage).Value ?? new List<VendaDto>())"
                          Striped="true"
                          Bordered="true"
                          Hoverable="true"
                          CurrentPage="currentPage">
                    <DataGridColumns>
                        <DataGridColumn TItem="VendaDto" Field="@nameof(VendaDto.DataVenda)" Caption="Data da Venda" DisplayFormat="{0:dd/MM/yyyy HH:mm}" />
                        <DataGridColumn TItem="VendaDto" Field="@nameof(VendaDto.MetodoPagamento)" Caption="Forma de Pagamento" />
                        <DataGridNumericColumn TItem="VendaDto" Field="@nameof(VendaDto.ValorTotal)" Caption="Valor Total" DisplayFormat="{0:C}" />
                        <DataGridColumn TItem="VendaDto" Caption="Detalhes dos Itens">
                            <Template>
                                @{
                                    var venda = contexto;
                                }
                                @if (venda != null && venda.Itens != null && venda.Itens.Any())
                                {
                                    <DataGrid TItem="VendaItemDto" Data="venda.Itens" Striped="true" Bordered="true">
                                        <DataGridColumns>
                                            <DataGridColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.ProdutoId)" Caption="Produto" />
                                            <DataGridNumericColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.Quantidade)" Caption="Quantidade" />
                                            <DataGridNumericColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.ValorUnitario)" Caption="Valor Unitário" DisplayFormat="{0:C}" />
                                            <DataGridNumericColumn TItem="VendaItemDto" Field="@nameof(VendaItemDto.Subtotal)" Caption="Subtotal" DisplayFormat="{0:C}" />
                                        </DataGridColumns>
                                    </DataGrid>
                                }
                                else
                                {
                                    <span>Sem itens</span>
                                }
                            </Template>
                        </DataGridColumn>
                    </DataGridColumns>
                </DataGrid>
                <Div class="d-flex justify-content-between align-items-center mb-2">
                    <Div>
                        <Button Color="Color.Light" Clicked="PaginaAnterior">Anterior</Button>
                        <Button Color="Color.Light" Clicked="ProximaPagina">Próximo</Button>
                    </Div>
                </Div>
            </CardBody>
        </Card>
    </Column>
</Row>

<Modal @ref="ModalRegistrarVenda">
    <ModalContent Size="ModalSize.Default" Centered="true">
        <ModalHeader>
            <strong>Registrar venda</strong>
        </ModalHeader>
        <ModalBody>
            <Field>
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <TextEdit @bind-Text="ProdutoSku" Placeholder="Insira o código do produto" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Default" Clicked="PesquisarVendaProduto">
                            <Icon Name="IconName.Search"/>
                        </Button>
                    </Addon>
                </Addons>
            </Field>
            <Field>
                <FieldLabel>Nome do Produto</FieldLabel>
                <TextEdit @bind-Text="NomeProduto" Disabled />
            </Field>
            <Field>
                <FieldLabel>Quantidade Vendida</FieldLabel>
                <NumericEdit TValue="int" @bind-Value="QuantidadeVendida" Placeholder="Quantidade" />
            </Field>
                <Field>
                    <FieldLabel>Forma de Pagamento</FieldLabel>
                    </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Success" Clicked="() => AlternarModalRegistrarVenda(true)">Salvar</Button>
            <Button Color="Color.Danger" Clicked="() => AlternarModalRegistrarVenda(false)">Cancelar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private string ProdutoSku;
    private string ProdutoNome;
    private string NomeProduto;
    private string FormaPagamentoString;
    private int QuantidadeVendida;
    private List<ProdutoDto> produtos;
    private Dictionary<DateTime, List<VendaDto>> vendasPorDia = new();
    private Modal ModalRegistrarVenda;
    private ProdutoDto produto;
    private int currentPage = 0;
    private DatePicker<DateTime?> datePicker;
    private DateTime? selectedDate;
    private VendaDto contexto;
    
    // Inicialização
    protected override async Task OnInitializedAsync()
    {
        produtos = await ProdutoService.ListarProdutos();
        vendasPorDia = await VendaService.ObterVendasAgrupadasPorDia() ?? new Dictionary<DateTime, List<VendaDto>>();
        VerificarDataAtual();
    }

    private async Task RegistrarVenda()
    {
        ModalRegistrarVenda.Show();
    }

    private async Task AlternarModalRegistrarVenda(bool salvar)
    {
        if (salvar)
        {
            if (!string.IsNullOrEmpty(ProdutoSku) && QuantidadeVendida > 0 && produto != null)
            {
                var venda = new VendaDto
                {
                    DataVenda = DateTime.Now,
                    MetodoPagamento = FormaPagamentoString
                };
                
                var vendaItem = new VendaItemDto
                {
                    ProdutoId = produto.Id,
                    Quantidade = QuantidadeVendida,
                    ValorUnitario = produto.ValorUnitario,
                    Subtotal = produto.ValorUnitario * QuantidadeVendida
                };
                
                venda.Itens = new List<VendaItemDto> { vendaItem };
                
                await VendaService.AdicionarVenda(venda);
                await AtualizarProdutos();
                ModalRegistrarVenda.Hide();
            }
        }
        else
        {
            ModalRegistrarVenda.Hide();
        }
    }

    private async Task PesquisarVendaProduto()
    {
        produto = produtos.FirstOrDefault(p => p.Sku == ProdutoSku);
        NomeProduto = produto?.Nome ?? "Produto não encontrado.";
    }

    private async Task AtualizarProdutos()
    {
        produtos = await ProdutoService.ListarProdutos();
        vendasPorDia = await VendaService.ObterVendasAgrupadasPorDia();
        StateHasChanged();
    }

    private void PaginaAnterior() { if (currentPage > 0) currentPage--; }
    private void ProximaPagina() { if (currentPage < vendasPorDia.Count - 1) currentPage++; }
    private void VerificarDataAtual()
    {
        var dataAtual = DateTime.Now.Date;
        if (!vendasPorDia.ContainsKey(dataAtual)) vendasPorDia[dataAtual] = new List<VendaDto>();
        currentPage = vendasPorDia.Keys.ToList().IndexOf(dataAtual);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") await OnDateSelected(selectedDate);
    }

    private async Task OnDateSelected(DateTime? date)
    {
        selectedDate = date;
        await FetchSalesForSelectedDate();
    }

    private async Task FetchSalesForSelectedDate()
    {
        if (selectedDate.HasValue)
        {
            var date = selectedDate.Value.Date;
            if (!vendasPorDia.ContainsKey(date)) vendasPorDia[date] = new List<VendaDto>();
            currentPage = vendasPorDia.Keys.ToList().IndexOf(date);
        }
    }

    private async Task ExcluirVenda()
    {
        
    }
}